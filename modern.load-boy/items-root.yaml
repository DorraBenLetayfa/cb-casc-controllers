removeStrategy:
  rbac: SYNC
  items: NONE

items:
  - kind: pipeline
    name: mock-loader-junit
    properties:
      - pipelineTriggers:
          triggers:
            - cron:
                spec: H/15 * * * *
    definition:
      cpsFlowDefinition:
        sandbox: true
        script: |
          parallel([0, 1].collectEntries {b -> ["branch-$b", {
            podTemplate {
              node("maven") {
                stage('Preparation') {
                  sh 'curl https://ipinfo.io/'
                }
                stage('Build') {
                  mockLoad 90
                }
            }
            checkpoint 'middle'
            podTemplate {
              node("maven") {
                stage('Deploy') {
                  archiveArtifacts allowEmptyArchive: true, artifacts: 'mock-artifact-*.txt'
                  fingerprint 'mock-artifact-*.txt'
                  junit 'mock-junit.xml'
                }
              }
            }
          }}]})
  - kind: pipeline
    name: mock-loader-stasher
    properties:
    - pipelineTriggers:
        triggers:
        - cron:
            spec: H/30 * * * *
    definition:
      cpsFlowDefinition:
        sandbox: true
        script: "          pipeline {\n            agent none\n            environment\
          \ {\n              SLEEP_SEC = '1'\n            }\n            stages {\n  \
          \            stage('Build') {\n                environment {\n             \
          \     MOCK_DATA_SIZE = '24M'\n                }\n                agent {\n \
          \                 kubernetes {\n                    yaml '''\n             \
          \         apiVersion: v1\n                      kind: Pod\n                \
          \      metadata:\n                        labels:\n                        \
          \  some-label: some-label-value\n                      spec:\n             \
          \           containers:\n                        - name: maven\n           \
          \               image: maven:alpine\n                          command:\n  \
          \                        - cat\n                          tty: true\n      \
          \                '''\n                    retries 2\n                  }\n \
          \               } \n                steps {\n                  container('maven')\
          \ {\n                      sh \"\"\"\n                          mvn -version\n\
          \                          sleep ${SLEEP_SEC}\n                          dd\
          \ if=/dev/zero of=mock.${BUILD_NUMBER}.dat  bs=${MOCK_DATA_SIZE}  count=1\n\
          \                      \"\"\"\n                    stash name: 'stuff', includes:\
          \ 'mock.*.dat'\n                  }\n                }\n              }\n  \
          \            stage(\"Checkpoint\") {\n                agent none //running outside\
          \ of any node or workspace\n                steps {\n                  checkpoint\
          \ 'middle'\n                }\n              }\n              stage('Post Build')\
          \ {\n                agent {\n                  kubernetes {\n             \
          \       yaml '''\n                      apiVersion: v1\n                   \
          \   kind: Pod\n                      metadata:\n                        labels:\n\
          \                          some-label: some-label-value\n                  \
          \    spec:\n                        containers:\n                        - name:\
          \ busybox\n                          image: busybox\n                      \
          \    command:\n                          - cat\n                          tty:\
          \ true\n                      '''\n                    retries 2\n         \
          \           defaultContainer 'busybox'\n                  }\n              \
          \  } \n                stages {\n                    stage ('Test'){\n     \
          \                 steps {  \n                          script {\n          \
          \                    Random random = new Random()\n                        \
          \      def random_int = (int) random.next(50)\n                            \
          \  echo \"random_int : ${random_int}\"\n                              if (random_int\
          \ % 2 == 0) {\n                                currentBuild.result = 'SUCCESS'\n\
          \                              } else {\n                                currentBuild.result\
          \ = 'FAILURE'\n                              }\n                          }\n\
          \                      }    \n                    }\n                    stage\
          \ ('Deploy'){\n                      when {\n                          expression\
          \ { currentBuild.result == 'SUCCESS' }\n                      }\n          \
          \            steps {\n                          dir (\"unstash\"){ // To avoid\
          \ java.nio.file.AccessDeniedException\n                              unstash\
          \ 'stuff'\n                              sh \"sleep ${SLEEP_SEC}\"\n       \
          \                       archiveArtifacts allowEmptyArchive: true, artifacts:\
          \ 'mock.*.dat'\n                          }\n                      } \n    \
          \              }\n                }\n              }\n            }\n      \
          \    }\n"
